function                                                                     ...
[                                                                            ...
  actualSimulationTimes,                                                     ...
  rotationVectorsBodyCoords,                                                 ...
  angularVelocitiesBodyCoords                                                ...
] =                                                                          ...
generateSolutionsForFreeRotationRigidBodyKinematics                          ...
        (                                                                    ...
          varargin                                                           ...
        )
%===============================================================================
%|
%|  FUNCTION:
%|
%|    generateSolutionsForFreeRotationRigidBodyKinematics
%|
%|-----------------------------------------------------------------------------
%|
%|  PURPOSE:
%|
%|    Generate solutions at specified times for torque free rotation of
%|    rigid bodies.
%|
%|-----------------------------------------------------------------------------
%|
%|  INPUTS:
%|
%|    J
%|      A three by three matrix of double precision floating point Inertia
%|      Tensor values.
%|      UNIT(s):  [kilograms / meter squared]
%|
%|    initialRotationVectorBodyCoords
%|      A one dimensional vector of three elements containing the initial
%|      rotation vector in non-inertial body coordinates.
%|      This rotation vector consists of a unit axis of rotation multiplied
%|      by a rotation angle.
%|      UNIT(s):  [radians]
%|
%|    intitalAngularVelocityBodyCoords
%|      A one dimensional vector of length three containing the initial
%|      angular velocity vector in non-inertial body coordinates.
%|      UNIT(s):  [radians/second]
%|
%|    numberTimeSamples
%|      Number of time sample values generated for the results.
%|      UNIT(s):  [nondimensional]
%|
%|    simulationEndTime
%|      Maximum time value for the simulation.
%|      UNIT(s):  [seconds[
%|
%|-----------------------------------------------------------------------------
%|
%|  OUTPUTS:
%|
%|    actualSimulationTimes
%|      A one dimensional vector the ith element of which is the actual ith
%|      simulation time value.
%|      UNIT(s):  [seconds]
%|
%|    rotationVectorsBodyCoords
%|      A two dimensional matrix having three rows and as many columns as
%|      there are time samples.
%|      The jth column of this matrix is the rotation vector for the jth
%|      sample time in non-inertial body coordinates.
%|      UNIT(s):  [radians]
%|
%|    angularVelocitiesBodyCoords
%|      A two dimensional vector the ith element of which is the
%|      angular velocity in non-inertial body coordinates at the
%|      ith sample time.
%|      UNIT(s):  [radians/second]
%|
%|-----------------------------------------------------------------------------
%|
%|  REFERENCE(s):
%|
%|    [ 1 ]  https://www.mathhworks.com/matlabcentral/fileexchange/
%|                   75265-euler-free-body-motion
%|
%|    [ 2 ]  Euler's Equations
%|           https://farside.ph.utexas.edu/teaching/celestial/Celestialhtml/
%|                   node70.htth
%|
%|    [ 3 ]  Euler Angles
%|           https://farside.ph.utexas.edu/teaching/celestial/Celestialhtml/
%|                   node71.html
%|
%|    [ 4 ]  "The Kinematic Equation for the Rotation Vector",
%|           Malcolm D. Shuster,
%|           IEEE Transactions on Aerospace and Electronic Systems,
%|           Vol. 29, No. 1, pp. 263 - 267,
%|           January 1993
%|           malcolmdshuster.com/Pub_1993c_J_RotVec_IEEE.pdf
%|
%|    [ 5 ]  "A Survey of Attitude Representations",
%|           Malcolm D. Shuster,
%|           The Journal of the Astronautical Sciences,
%|           Vol. 41, No. 4, pp. 430 - 517,
%|           October-December, 1993
%|           malcolmdshuster.com/Pub_1993h_J_Repsurv_scan.pdf
%|
%|------------------------------------------------------------------------------
%|
%|  NOTE(s)
%|
%|    [ 1 ]  The input argument list is specified as Matlab 'varargin'
%|           so that this function can manage everything about the input
%|           argument list.
%|           If the input argument list was provided explicitly and a user
%|           provided too many input arguments, then Matlab would generate
%|           an error message and this function's error handling would
%|           never be invoked.
%|
%|    [ 2 ] State Vector Components:
%|
%|          [ 2.1 ]  State Vector components 1, 2 and 3 are the
%|                   "rotation vector".
%|
%|          [ 2.2 ]  State Vector components 4, 5 and 6 are the
%|                   angular velocity vector.
%|
%|    [ 3 ] Rotation Vector Definition:
%|
%|          A rotation vector is a one dimensional row or column vector of
%|          length three.
%|
%|            [ 3.1 ] The norm of the rotation vector is the rotation angle.
%|
%|            [ 3.2 ] The normalized rotation vector is a 3D unit vector
%|                    which serves as the rotation axis.
%|
%|    [ 4 ] Time rate of change of the rotation vector:
%|
%|          [ 4.1 ] The time rate of change of the rotation vector is not
%|                  the angular velocity vector.
%|
%|          [ 4.2 ] To determine the time rate of change of the rotation
%|                  vector, use Equation (42) on Page 265 of Reference [ 4 ].
%|
%|------------------------------------------------------------------------------
%|
%|  USAGE:
%|
%|    [                                                         ...
%|      actualSimulationTimes,                                  ...
%|      rotationVectorsBodyCoords,                              ...
%|      angularVelocitiesBodyCoords                             ...
%|    ] = generateSolutionsForFreeRotationRigidBodyKinematics   ,,,
%|                (                                             ...
%|                  J,                                          ...
%|                  initialRotationVectorBodyCoords,            ...
%|                  intitalAngularVelocityBodyCoords            ...
%|                  numberTimeSamples,                          ...
%|                  simulationEndTime                           ...
%|                );
%|
%===============================================================================

%===============================================================================
%        1         2         3         4         5         6         7         8
%2345678901234567890123456789012345678901234567890123456789012345678901234567890
%===============================================================================

%{------------------------------------------------------------------------------
   expectedNumberInputArguments   =  5;
   expectedNumberOutputArguments  =  3;
%- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     actualNumberInputArguments   =  nargin;
     actualNumberOutputArguments  =  nargout;
%-------------------------------------------------------------------------------
   if( actualNumberInputArguments == expectedNumberInputArguments )
    %{--------------------------------------------------------------------------
    %  Have encountered expected number of function input arguments.
    %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %  Extract input arguments from variable input argument cell array.
    %---------------------------------------------------------------------------
       J                                = varargin{ 1 };
       initialRotationVectorBodyCoords  = varargin{ 2 };
       initialAngularVelocityBodyCoords = varargin{ 3 };
       numberTimeSamples                = varargin{ 4 };
       simulationEndTime                = varargin{ 5 };
    %---------------------------------------------------------------------------
    %  Check number of function output arguments.
    %---------------------------------------------------------------------------
       if( actualNumberOutputArguments == expectedNumberOutputArguments )
        %{----------------------------------------------------------------------
        %  Have encountered expected number of function output arguments.
        %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        %  Continue processing.
        %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        %  Define a six component state vector consisting of:
        %     A three element rotation vector.
        %     A three element angular velocity vector.
        %-----------------------------------------------------------------------
           initialStateVector = [                                            ...
                                  initialRotationVectorBodyCoords;           ...
                                  initialAngularVelocityBodyCoords           ...
                                ];
        %-----------------------------------------------------------------------
        %  Set the error tolerance option values for the ODE solver.
        %-----------------------------------------------------------------------
           ordinaryDifferentialEquationsSolverOptions =                      ...
                   odeset                                                    ...
                     (                                                       ...
                       'RelTol',   1.0E-13,                                  ...
                       'AbsTol',   1.0E-13                                   ...
                     );
        %-----------------------------------------------------------------------
        %  Obtain the principal Moment of Inertia values from the specified
        %  Moment of Inertia matrix.
        %-----------------------------------------------------------------------
           principalMomentInertiaVector = 1.0 ./ linsolve( J, ones( 3, 1 ) );
        %-----------------------------------------------------------------------
        %  Generate a vector of specified simulation time sample values.
        %-----------------------------------------------------------------------
           specifiedSimulationTimes     = linspace                           ...
                                             (                               ...
                                               0.0,                          ...
                                               simulationEndTime,            ...
                                               numberTimeSamples             ...
                                             );
        %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
           stateDerivativesFunctionHandle =                                  ...
                  @(                                                         ...
                     currentTime,                                            ...
                     currentStateVector                                      ...
                   )                                                         ...
                  determineStateDerivatives                                  ...
                           (                                                 ...
                             currentTime,                                    ...
                             currentStateVector,                             ...
                             principalMomentInertiaVector                    ...
                           );
        %-----------------------------------------------------------------------
        %  Use the Matlab implementation of the Dorman-Prince 45 explicit
        %  variable time step Runge-Kutta method to solve the equations of
        %  motion.
        %-----------------------------------------------------------------------
           [                                                                 ...
             actualSimulationTimes,                                          ...
             simulationStateVectors                                          ...
           ] = ode45                                                         ...
                (                                                            ...
                  stateDerivativesFunctionHandle,                            ...
                  specifiedSimulationTimes,                                  ...
                  initialStateVector,                                        ...
                  ordinaryDifferentialEquationsSolverOptions                 ...
                );
        %-----------------------------------------------------------------------
        % 
        % NOTE(s):
        % 
        %   [ 1 ] State Vector Components:
        % 
        %         [ 1.1 ]  State Vector components 1, 2 and 3 are the
        %                  "rotation vector".
        % 
        %         [ 1.2 ]  State Vector components 4, 5 and 6 are the
        %                  angular velocity vector.
        % 
        %   [ 2 ] Rotation Vector Definition:
        % 
        %         A rotation vector is a one dimensional row or column
        %         vector of length three.
        % 
        %           [ 2.1 ] The norm of the rotation vector is the
        %                   rotation angle.
        % 
        %           [ 2.2 ] The normalized rotation vector is a 3D unit
        %                   vector which serves as the rotation axis.
        % 
        % 
        %-----------------------------------------------------------------------
           rotationVectorsBodyCoords   = simulationStateVectors              ...
                                                       ( :, 1 : 3 )';
           angularVelocitiesBodyCoords = simulationStateVectors              ...
                                                       ( :, 4 : 6 )';
        %}----------------------------------------------------------------------
       else
        %{----------------------------------------------------------------------
        %  Have not encountered expected number of function output arguments.
        %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        %  Generate a purpose message.
        %-----------------------------------------------------------------------
           generateKinematicsSolutionsPurposeMessage(  );
        %-----------------------------------------------------------------------
        %  Generate a usage message.
        %-----------------------------------------------------------------------
           generateKinematicsSolutionsUsageMessage(  );
        %-----------------------------------------------------------------------
        %  Generate an error message.
        %-----------------------------------------------------------------------
           STDOUT = 1;
        %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
           fprintf                                                           ...
           (                                                                 ...
             STDOUT,                                                         ...
             [                                                               ...
               '\n\n\n'                                                      ...
               '%s\n%s\n%s\n%s\n%s\n%s\n%s\n'                                ...
               '%s%d\n'                                                      ...
               '%s%d\n'                                                      ...
               '%s\n%s\n%s\n%s\n'                                            ...
               '\n\n\n'                                                      ...
             ],                                                              ...
             '============================================================', ...
             '|',                                                            ...
             '|  ERROR:',                                                    ...
             '|',                                                            ...
             '|    Have encountered unexpected number function output',      ...
             '|    arguments.',                                              ...
             '|',                                                            ...
             '|    Expected number function output arguments:-->',           ...
             expectedNumberOutputArguments,                                  ...
             '|      Actual number function output arguments:-->',           ...
               actualNumberOutputArguments,                                  ...
             '|',                                                            ...
             '|    This is an error.',                                       ...
             '|',                                                            ...
             '============================================================'  ...
           );
        %-----------------------------------------------------------------------
           rotationVectorsBodyCoords   = [ ];
           angularVelocitiesBodyCoords = [ ];
        %-----------------------------------------------------------------------
        %  Terminate the program.
        %-----------------------------------------------------------------------
           error                                                             ...
             (                                                               ...
               [                                                             ...
                 'Have encountered unexpected number of function '           ...
                 'output arguments.'                                         ...
               ]                                                             ...
             );
        %}----------------------------------------------------------------------
       end;
    %}--------------------------------------------------------------------------
   else
    %{--------------------------------------------------------------------------
    %  Have not encountered expected number of function input arguments.
    %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %  Generate a purpose message.
    %---------------------------------------------------------------------------
       generateKinematicsSolutionsPurposeMessage(  );
    %---------------------------------------------------------------------------
    %  Generate a usage message.
    %---------------------------------------------------------------------------
       generateKinematicsSolutionsUsageMessage(  );
    %---------------------------------------------------------------------------
    %  Generate an error message.
    %---------------------------------------------------------------------------
       STDOUT = 1;
    %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       fprintf                                                               ...
       (                                                                     ...
         STDOUT,                                                             ...
         [                                                                   ...
           '\n\n\n'                                                          ...
           '%s\n%s\n%s\n%s\n%s\n%s\n%s\n'                                    ...
           '%s%d\n'                                                          ...
           '%s%d\n'                                                          ...
           '%s\n%s\n%s\n%s\n'                                                ...
           '\n\n\n'                                                          ...
         ],                                                                  ...
         '============================================================',     ...
         '|',                                                                ...
         '|  ERROR:',                                                        ...
         '|',                                                                ...
         '|    Have encountered unexpected number function input',           ...
         '|    arguments.',                                                  ...
         '|',                                                                ...
         '|    Expected number function input arguments:-->',                ...
         expectedNumberInputArguments,                                       ...
         '|      Actual number function input arguments:-->',                ...
           actualNumberInputArguments,                                       ...
         '|',                                                                ...
         '|    This is an error.',                                           ...
         '|',                                                                ...
         '============================================================'      ...
       );
    %---------------------------------------------------------------------------
       rotationVectorsBodyCoords   = [ ];
       angularVelocitiesBodyCoords = [ ];
    %---------------------------------------------------------------------------
    %  Terminate the program.
    %---------------------------------------------------------------------------
       error                                                                 ...
        ( 'Have encountered unexpected number of function input arguments.' );
    %}--------------------------------------------------------------------------
   end;
%------------------------------------------------------------------------------- 
   return;
%}------------------------------------------------------------------------------


%===============================================================================
function                                                                     ...
[                                                                            ...
  currentStateDerivatives                                                    ...
] =                                                                          ...
determineStateDerivatives                                                    ...
         (                                                                   ...
           currentTime,                                                      ...
           currentStateVector,                                               ...
           principalInertiaMomentVector                                      ...
         )
%{------------------------------------------------------------------------------
%
%------------------------------------------------------------------------------
%
%  REFERENCE(s):
%
%    [ 1 ]  https://www.mathhworks.com/matlabcentral/fileexchange/
%                   75265-euler-free-body-motion
%
%    [ 2 ]  Euler's Equations
%           https://farside.ph.utexas.edu/teaching/celestial/Celestialhtml/
%                   node70.htth
%
%    [ 3 ]  Euler Angles
%           https://farside.ph.utexas.edu/teaching/celestial/Celestialhtml/
%                   node71.html
%
%    [ 4 ]  "The Kinematic Equation for the Rotation Vector",
%           Malcolm D. Shuster,
%           IEEE Transactions on Aerospace and Electronic Systems,
%           Vol. 29, No. 1, pp. 263 - 267,
%           January 1993
%           malcolmdshuster.com/Pub_1993c_J_RotVec_IEEE.pdf
%
%    [ 5 ]  "A Survey of Attitude Representations",
%           Malcolm D. Shuster,
%           The Journal of the Astronautical Sciences,
%           Vol. 41, No. 4, pp. 430 - 517,
%           October-December, 1993
%           malcolmdshuster.com/Pub_1993h_J_Repsurv_scan.pdf
%
%  NOTE(s):
%
%    [ 1 ] State Vector Components:
%
%          [ 1.1 ]  State Vector components 1, 2 and 3 are the
%                   "rotation vector".
%
%          [ 1.2 ]  State Vector components 4, 5 and 6 are the
%                   angular velocity vector.
%
%    [ 2 ] Rotation Vector Definition:
%
%          A rotation vector is a one dimensional row or column vector of
%          length three.
%
%            [ 2.1 ] The norm of the rotation vector is the rotation angle.
%
%            [ 2.2 ] The normalized rotation vector is a 3D unit vector
%                    which serves as the rotation axis.
%
%    [ 3 ] The time rate of change in the "rotation vector" is not the
%          angular velocity vector.
%          Use Equation (276) of Reference [5] on Page 479 to compute
%          the time rate of change in the "rotation vector".
%
%    [ 4 ] The function "determineStateDerivatives" uses Equation (276)
%          rather than Equation (278) of Reference [5] on Page 479.
%          Here it will be assumed that the rotation vectors are
%          expressed in the non-inertial body coordinates.
%
%    [ 5 ] The "rotation vectors" are identical in the inertial
%           and the non-inertial body coordinate systems.
%
%-------------------------------------------------------------------------------
   X_INDEX                            = 1;
   Y_INDEX                            = 2;
   Z_INDEX                            = 3;
%- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   STATE_ROTATION_VECTOR_X            = 1;
   STATE_ROTATION_VECTOR_Y            = 2;
   STATE_ROTATION_VECTOR_Z            = 3;
%- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   STATE_ANG_VEL_X                    = 4;
   STATE_ANG_VEL_Y                    = 5;
   STATE_ANG_VEL_Z                    = 6;
%- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   STATE_DERIV_ROTATION_VECTOR_X      = 1;
   STATE_DERIV_ROTATION_VECTOR_Y      = 2;
   STATE_DERIV_ROTATION_VECTOR_Z      = 3;
   STATE_DERIV_ANG_ACCEL_X            = 4;
   STATE_DERIV_ANG_ACCEL_Y            = 5;
   STATE_DERIV_ANG_ACCEL_Z            = 6;
%-------------------------------------------------------------------------------
   currentStateDerivatives            = zeros( size( currentStateVector ) );
   currentRotationVectorBodyCoords    = currentStateVector                   ...
                                               (                             ...
                                                 [                           ...
                                                   STATE_ROTATION_VECTOR_X,  ...
                                                   STATE_ROTATION_VECTOR_Y,  ...
                                                   STATE_ROTATION_VECTOR_Z   ...
                                                 ]                           ...
                                               );
%- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   lengthCurrentRotationVector        = norm                                 ...
                                         ( currentRotationVectorBodyCoords );
   currentRotationAngleRadians        = lengthCurrentRotationVector;
%-------------------------------------------------------------------------------
   oneRevolution                      = 2.0 * pi;
   currentRotationAngleRadiansMod     = mod(                                 ...
                                             currentRotationAngleRadians,    ...
                                             oneRevolution                   ...
                                           );
   currentRotationHalfAngleRadiansMod = currentRotationAngleRadiansMod / 2.0;
%-------------------------------------------------------------------------------
   currentAngularVelocityVectorBodyCoords                                    ...
                                      = currentStateVector                   ...
                                               (                             ...
                                                 [                           ...
                                                   STATE_ANG_VEL_X,          ...
                                                   STATE_ANG_VEL_Y,          ...
                                                   STATE_ANG_VEL_Z           ...
                                                 ]                           ...
                                               );
%-------------------------------------------------------------------------------
   if( all( currentRotationVectorBodyCoords == 0 ) == true )
    %{--------------------------------------------------------------------------
    %  The current rotation vector is the zero vector.
    %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %  Assign the angular velocity as a default value to the rotation
    %  vector time rate of change.
    %---------------------------------------------------------------------------
       currentStateDerivatives                                               ...
              ( STATE_DERIV_ROTATION_VECTOR_X ) =                            ...
                                     currentAngularVelocityVectorBodyCoords  ...
                                                                 ( X_INDEX );
       currentStateDerivatives                                               ...
              ( STATE_DERIV_ROTATION_VECTOR_Y ) =                            ...
                                     currentAngularVelocityVectorBodyCoords  ...
                                                                 ( Y_INDEX );
       currentStateDerivatives                                               ...
              ( STATE_DERIV_ROTATION_VECTOR_Z ) =                            ...
                                     currentAngularVelocityVectorBodyCoords  ...
                                                                 ( Z_INDEX );
    %}--------------------------------------------------------------------------
   else
    %{--------------------------------------------------------------------------
    %  The current rotation vector is not the zero vector.
    %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    %  Determine the time rate of change of the rotation vector components
    %  of the specified state vector.
    %
    %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    %  NOTE(s):
    %
    %    [ 1 ] The time rate of change in the "rotation vector" is not the
    %          angular velocity vector,
    %
    %    [ 2 ] To compute the time rate of change in the "rotation vector",
    %          using:
    %
    %          [ 2.1 ] Equation  (42) of Reference [ 4 ] on Page 265.
    %                  REFERENCE [ 4 ]:
    %                    malcolmdshuster.com/Pub_1993c_J_RotVec_IEEE.pdf
    %
    %          [ 2.2 ] Equation (276) of Reference [ 5 ] on Page 479.
    %                  REFERENCE [ 5 ]:
    %                    malcolmdshuster.com/Pub_1993h_J_Repsurv_scan.pdf
    %
    %---------------------------------------------------------------------------
       [                                                                     ...
         rotationCrossAngularVelocityVectorBodyCoords                        ...
       ] = vectorProduct                                                     ...
                 (                                                           ...
                   currentRotationVectorBodyCoords,                          ...
                   currentAngularVelocityVectorBodyCoords                    ...
                 );
    %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       [                                                                     ...
         rotationDoubleCrossAngularVelocityVectorBodyCoords                  ...
       ] = vectorProduct                                                     ...
                 (                                                           ...
                   currentRotationVectorBodyCoords,                          ...
                   rotationCrossAngularVelocityVectorBodyCoords              ...
                 );
    %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       rotationVectorDerivativeBodyCoords =                                  ...
           currentAngularVelocityVectorBodyCoords                            ...
           +                                                                 ...
           (                                                                 ...
             0.5                                                             ...
             *                                                               ...
             rotationCrossAngularVelocityVectorBodyCoords                    ...
           )                                                                 ...
           +                                                                 ...
           (                                                                 ...
             (                                                               ...
               1.0                                                           ...
               /                                                             ...
               (                                                             ...
                 currentRotationAngleRadiansMod                              ...
                 *                                                           ...
                 currentRotationAngleRadiansMod                              ...
               )                                                             ...
             )                                                               ...
             *                                                               ...
             (                                                               ...
               1.0                                                           ...
               +                                                             ...
               (                                                             ...
                 -                                                           ...
                 currentRotationHalfAngleRadiansMod                          ...
                 *                                                           ...
                 cot( currentRotationHalfAngleRadiansMod )                   ...
               )                                                             ...
             )                                                               ...
             *                                                               ...
             rotationDoubleCrossAngularVelocityVectorBodyCoords              ...
           );
    %- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
       currentStateDerivatives                                               ...
          ( STATE_DERIV_ROTATION_VECTOR_X ) =                                ...
                                 rotationVectorDerivativeBodyCoords          ...
                                                         ( X_INDEX );
       currentStateDerivatives                                               ...
          ( STATE_DERIV_ROTATION_VECTOR_Y ) =                                ...
                                 rotationVectorDerivativeBodyCoords          ...
                                                         ( Y_INDEX );
       currentStateDerivatives                                               ...
          ( STATE_DERIV_ROTATION_VECTOR_Z ) =                                ...
                                 rotationVectorDerivativeBodyCoords          ...
                                                         ( Z_INDEX );
    %}--------------------------------------------------------------------------
   end;
%-------------------------------------------------------------------------------
%
%  Use Euler's equations to determine the angular acceleration in terms of
%  moments of inertia (J) and angular velocities (w).
%
%-------------------------------------------------------------------------------
   Jx                               = principalInertiaMomentVector( X_INDEX );
   Jy                               = principalInertiaMomentVector( Y_INDEX );
   Jz                               = principalInertiaMomentVector( Z_INDEX );
%-------------------------------------------------------------------------------
   wx                               = currentAngularVelocityVectorBodyCoords ...
                                                                  ( X_INDEX );
   wy                               = currentAngularVelocityVectorBodyCoords ...
                                                                  ( Y_INDEX );
   wz                               = currentAngularVelocityVectorBodyCoords ...
                                                                  ( Z_INDEX );
%-------------------------------------------------------------------------------
   xAngularAccelerationBodyCoords   = (  ( Jy - Jz ) / Jx ) * wy * wz;
   yAngularAccelerationBodyCoords   = ( -( Jx - Jz ) / Jy ) * wx * wz;
   zAngularAccelerationBodyCoords   = (  ( Jx - Jy ) / Jz ) * wx * wy;
%-------------------------------------------------------------------------------
   currentStateDerivatives                                                   ...
        ( STATE_DERIV_ANG_ACCEL_X ) = xAngularAccelerationBodyCoords;
   currentStateDerivatives                                                   ...
        ( STATE_DERIV_ANG_ACCEL_Y ) = yAngularAccelerationBodyCoords;
   currentStateDerivatives                                                   ...
        ( STATE_DERIV_ANG_ACCEL_Z ) = zAngularAccelerationBodyCoords;
%-------------------------------------------------------------------------------
   return;
%}------------------------------------------------------------------------------
